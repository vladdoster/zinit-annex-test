#!/usr/bin/env zsh
# -*- mode: sh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
#
# Copyright (c) 2016-2021 Sebastian Gniazdowski and contributors
# Copyright (c) 2021-2022 zdharma-continuum and contributors
#

emulate -LR zsh -o extendedglob
local -a TARGETS match mbegin mend

:zpTestMakeExpandVars() {
  while [[ $rest == (#b)[^$]#($)* ]]; do
    front=$front${rest[1,$mbegin[1]-1]}
    rest=${rest[$mbegin[1],-1]}
    case $rest[2] in
      '$')
        front=$front\$\$
        rest=${rest[3,-1]}
        continue
        ;;
      '(')
        open='('
        close=')'
        ;;
      '{')
        open='{'
        close='}'
        ;;
      [[:alpha:]])
        open=''
        close=''
        var=$rest[2]
        ;;
      *)
        print -- $front$rest
        return 1
        ;;
    esac
    if [[ -n $open ]]; then
      if [[ $rest == \$$open(#b)([[:alnum:]_]##)(#B)$close* ]]; then
        var=$match
      else
        print -- $front$rest
        return 1
      fi
    fi
    val=''
    if [[ -n ${VAR_ARGS[(i)$var]} ]]; then
      val=${VAR_ARGS[$var]}
    else
      if [[ -n $opt_args[(I)(-e|--environment-overrides)] ]]; then
        if [[ $parameters[$var] == scalar-export* ]]; then
          val=${(P)var}
        elif [[ -n ${VARIABLES[(i)$var]} ]]; then
          val=${VARIABLES[$var]}
        fi
      else
        if [[ -n ${VARIABLES[(i)$var]} ]]; then
          val=${VARIABLES[$var]}
        elif [[ $parameters[$var] == scalar-export* ]]; then
          val=${(P)var}
        fi
      fi
    fi
    rest=${rest//\$$open$var$close/$val}
  done
  print -- ${front}${rest}
}

:zpTestMakeParseMakefile() {
  local input var val target dep TAB=$'\t' tmp IFS=
  while read input; do
    case "$input " in
      [[*?[:alnum:]$][^$TAB:=%]#:[^=]*)
        target="$(:zpTestMakeExpandVars ${input%%:*})"
        TARGETS+=(${(z)target})
        ;;
    esac
  done
}

:zpTestMakeParseMakefile < "$1"
reply=("${(u)TARGETS[@]}")

# vim:ft=zsh:sw=2:sts=2:
